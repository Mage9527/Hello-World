连接符 +  （字符串类型和任何类型数据相连接，都是字符串）

转义字符 \	(通过反斜杠改变后边所跟 字符 的含义) \n 换行	\t 制表符	\\ \

算数运算符	+	-	*	/	%	++	--

赋值运算符	=	+=	-=	*=	/=	%=

关系运算符	>	<	>=	<=	==	!=	===	!===

条件运算符	（表达式）？	值1:值2;	

逻辑运算符	&&	||	！

流程控制：
		if(条件)			if(条件)			if(条件)
		语句；			语句；			语句；
						else			else if(条件)
						语句；					语句；			
										else if(条件)
												语句；
										...

		switch(表达式)
			 {
			 	case 值1; 语句;break;
			 	case 值2; 语句;break;
			 	case 值3; 语句;break;
			 	....
			 	default;
			 			语句;break;
			 }
		
		多重的else-if	 
		结构：
				 if(条件)
				 语句;
				 else
				 if(条件)
				 语句;
				 else
				 if(条件)
				 语句;
				 	....
				 else
				 语句;
				 
			do{
			 	循环体;
			 }while(循环条件);
			 工作原理：先执行循环体一次，然后判断条件，如果条件为真则在执行循环体，然后在判断条件，
			 			条件为真则在执行循环体，如此反复直到条件为假循环结束
			
			
			for循环
			 【格式】
			 	for(表达式1;表达式2;表达式3){
			 		循环语句;
			 	}
			 【执行顺序】
			 	1、先求解表达式1（只求一次）
			 	2、求解表达式2，若其值为真（非0）
			 	则执行for语句中的循环语句，   然后  在去求解表达式3
			 	在求解表达式2，若为假，则结束循环。
			 
	while(循环的条件)
    {
        需要重复执行的语句(循环体);
    }
        工作原理：先判断 条件 的 结果 是否为真，如果条件为 真 则执行循环体一次，然后在判断条件是否为 真，如果为 真 则在执行循环体， 如此反复，
        直到条件为假时循环结束，循环结束后会继续执行下边的语句。
        

函数
	